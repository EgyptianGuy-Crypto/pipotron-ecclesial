---
// Word lists from your screenshot
const wordLists = {
  starters: [
    "Avec",
    "Consid√©rant", 
    "O√π que nous m√®ne",
    "Eu √©gard √†",
    "Vu",
    "En ce qui concerne",
    "Dans le cas particulier de"
  ],
  situations: [
    "la restriction",
    "l'orientation",
    "la crise",
    "l'inertie",
    "la difficult√©",
    "l'aust√©rit√©",
    "la d√©gradation"
  ],
  qualifiers: [
    "pr√©sente",
    "actuelle",
    "g√©n√©rale",
    "induite",
    "conjoncturelle",
    "observ√©e",
    "contextuelle"
  ],
  actions: [
    "il convient d#",
    "il faut",
    "on se doit d#",
    "il est pr√©f√©rable d#",
    "il serait int√©ressant d#",
    "il ne faut pas n√©gliger d#",
    "on ne peut se passer d#"
  ],
  verbs: [
    "√©tudier",
    "examiner",
    "favoriser",
    "prendre en consid√©ration",
    "anticiper",
    "imaginer",
    "uniformiser"
  ],
  quantities: [
    "toutes les",
    "chacune des",
    "la majorit√© des",
    "la simultan√©it√© des",
    "l'ensemble des",
    "la somme des",
    "la totalit√© des"
  ],
  solutions: [
    "solutions",
    "issues",
    "probl√©matiques",
    "voies",
    "alternatives",
    "organisations matricielles",
    "am√©liorations"
  ],
  outcomes: [
    "imaginables",
    "possibles",
    "s'offrant √† nous",
    "de bon sens",
    "envisageables",
    "√©ventuelles",
    "r√©alisables"
  ],
  timeframes: [
    "√† long terme",
    "pour longtemps",
    "√† l'avenir",
    "pour le futur",
    "depuis longtemps",
    "√† court terme",
    "rapidement"
  ]
};
---

<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Pipotron √âpiscopal</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 min-h-screen font-['Inter']">
    <div class="max-w-7xl mx-auto px-6 py-8">
      <!-- Title with gradient -->
      <div class="text-center mb-12">
        <h1 class="text-5xl md:text-6xl font-bold bg-gradient-to-r from-yellow-400 via-pink-400 to-red-400 bg-clip-text text-transparent mb-4">
          Pipotron √âpiscopal
        </h1>
        <p class="text-purple-200 text-lg">G√©n√©rateur de langue de bois eccl√©siastique üôè</p>
      </div>
      
      <!-- Result Area - Big and Centered with glassmorphism -->
      <div class="mb-12">
        <div id="result" class="backdrop-blur-lg bg-white/10 rounded-2xl shadow-2xl p-8 border border-white/20 min-h-40 flex items-center justify-center">
          <p class="text-white/70 text-lg text-center">Cliquez sur "G√©n√©rer un nouveau" pour cr√©er une phrase automatiquement ‚ú®</p>
        </div>
      </div>

      <!-- Generate Button with hover effects -->
      <div class="text-center mb-12">
        <button 
          id="generateBtn" 
          class="bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600 text-white font-semibold px-10 py-4 rounded-full shadow-lg transform hover:scale-105 transition-all duration-200 text-lg"
        >
          ‚ú® G√©n√©rer un nouveau
        </button>
      </div>

      <!-- Instructions with modern card -->
      <div class="backdrop-blur-lg bg-white/10 border border-white/20 rounded-xl p-6 mb-8">
        <p class="text-white/90 text-center text-lg">
          üí° Ou composez manuellement votre phrase en s√©lectionnant dans les listes ci-dessous
        </p>
      </div>

      <!-- Word Lists Grid with modern cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Column 1 -->
        <div class="space-y-6">
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">üéØ D√©but</label>
            <select id="starters" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.starters.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
          
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">‚ö° Action</label>
            <select id="actions" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.actions.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
          
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">üéØ Solutions</label>
            <select id="solutions" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.solutions.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
        </div>

        <!-- Column 2 -->
        <div class="space-y-6">
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">üî• Situation</label>
            <select id="situations" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.situations.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
          
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">üöÄ Verbe</label>
            <select id="verbs" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.verbs.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
          
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">‚ú® R√©sultat</label>
            <select id="outcomes" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.outcomes.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
        </div>

        <!-- Column 3 -->
        <div class="space-y-6">
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">üíé Qualificatif</label>
            <select id="qualifiers" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.qualifiers.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
          
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">üìä Quantit√©</label>
            <select id="quantities" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="7">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.quantities.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
          
          <div class="backdrop-blur-lg bg-white/10 rounded-xl p-6 border border-white/20">
            <label class="block text-white font-semibold mb-3 text-lg">‚è∞ Temporalit√©</label>
            <select id="timeframes" class="w-full p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all" size="8">
              <option value="" class="bg-gray-800">-- Choisir --</option>
              {wordLists.timeframes.map(word => <option value={word} class="bg-gray-800">{word}</option>)}
            </select>
          </div>
        </div>
      </div>

      <!-- Reset Button -->
      <div class="text-center mt-12">
        <button 
          id="resetBtn" 
          class="bg-white/20 hover:bg-white/30 text-white font-semibold px-6 py-3 rounded-full backdrop-blur-sm border border-white/30 transition-all duration-200"
        >
          üîÑ R√©initialiser
        </button>
      </div>
    </div>

    <script>
      // Same JavaScript as before but with updated styling for results
      const wordLists = {
        starters: ["Avec", "Consid√©rant", "O√π que nous m√®ne", "Eu √©gard √†", "Vu", "En ce qui concerne", "Dans le cas particulier de"],
        situations: ["la restriction", "l'orientation", "la crise", "l'inertie", "la difficult√©", "l'aust√©rit√©", "la d√©gradation"],
        qualifiers: ["pr√©sente", "actuelle", "g√©n√©rale", "induite", "conjoncturelle", "observ√©e", "contextuelle"],
        actions: ["il convient d#", "il faut", "on se doit d#", "il est pr√©f√©rable d#", "il serait int√©ressant d#", "il ne faut pas n√©gliger d#", "on ne peut se passer d#"],
        verbs: ["√©tudier", "examiner", "favoriser", "prendre en consid√©ration", "anticiper", "imaginer", "uniformiser"],
        quantities: ["toutes les", "chacune des", "la majorit√© des", "la simultan√©it√© des", "l'ensemble des", "la somme des", "la totalit√© des"],
        solutions: ["solutions", "issues", "probl√©matiques", "voies", "alternatives", "organisations matricielles", "am√©liorations"],
        outcomes: ["imaginables", "possibles", "s'offrant √† nous", "de bon sens", "envisageables", "√©ventuelles", "r√©alisables"],
        timeframes: ["√† long terme", "pour longtemps", "√† l'avenir", "pour le futur", "depuis longtemps", "√† court terme", "rapidement"]
      };

      function getRandomItem(array) {
        return array[Math.floor(Math.random() * array.length)];
      }

      function generateSentence() {
        const starter = getRandomItem(wordLists.starters);
        const situation = getRandomItem(wordLists.situations);
        const qualifier = getRandomItem(wordLists.qualifiers);
        const action = getRandomItem(wordLists.actions);
        const verb = getRandomItem(wordLists.verbs);
        const quantity = getRandomItem(wordLists.quantities);
        const solution = getRandomItem(wordLists.solutions);
        const outcome = getRandomItem(wordLists.outcomes);
        const timeframe = getRandomItem(wordLists.timeframes);

        let processedAction = action.replace('d#', verb.startsWith('a') || verb.startsWith('e') || verb.startsWith('i') || verb.startsWith('o') || verb.startsWith('u') ? "d'" : "de");

        const sentence = `${starter} ${situation} ${qualifier}, ${processedAction} ${verb} ${quantity} ${solution} ${outcome} ${timeframe}.`;
        
        return sentence;
      }

      document.getElementById('generateBtn').addEventListener('click', function() {
        const sentence = generateSentence();
        document.getElementById('result').innerHTML = `<p class="text-2xl text-white text-center leading-relaxed font-medium">${sentence}</p>`;
      });

      document.getElementById('resetBtn').addEventListener('click', function() {
        const selects = document.querySelectorAll('select');
        selects.forEach(select => {
          select.selectedIndex = 0;
        });
        document.getElementById('result').innerHTML = `<p class="text-white/70 text-lg text-center">Cliquez sur "G√©n√©rer un nouveau" pour cr√©er une phrase automatiquement ‚ú®</p>`;
      });

      const selects = document.querySelectorAll('select');
      selects.forEach(select => {
        select.addEventListener('change', function() {
          updateManualSentence();
        });
      });

      function updateManualSentence() {
        const selectedValues = {};
        selects.forEach(select => {
          if (select.value) {
            selectedValues[select.id] = select.value;
          }
        });

        if (Object.keys(selectedValues).length > 0) {
          let sentence = "";
          const keys = ['starters', 'situations', 'qualifiers', 'actions', 'verbs', 'quantities', 'solutions', 'outcomes', 'timeframes'];
          
          keys.forEach(key => {
            if (selectedValues[key]) {
              if (key === 'actions' && selectedValues[key].includes('d#')) {
                const verb = selectedValues.verbs || '√©tudier';
                const processedAction = selectedValues[key].replace('d#', verb.startsWith('a') || verb.startsWith('e') || verb.startsWith('i') || verb.startsWith('o') || verb.startsWith('u') ? "d'" : "de");
                sentence += processedAction + " ";
              } else {
                sentence += selectedValues[key] + " ";
              }
            }
          });

          if (sentence.trim()) {
            document.getElementById('result').innerHTML = `<p class="text-2xl text-white text-center leading-relaxed font-medium">${sentence.trim()}.</p>`;
          }
        }
      }
    </script>
  </body>
</html>
