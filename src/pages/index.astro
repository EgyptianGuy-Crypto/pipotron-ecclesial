---
import Layout from '../layouts/Layout.astro';

const wordLists = {
  // ... (garder toutes les wordLists identiques)
  incidents: [
    "Suite aux r√©cents √©v√©nements qui ont touch√© notre communaut√© dioc√©saine",
    "Face aux difficult√©s pastorales que traverse notre dioc√®se en ces temps troubl√©s",
    "Concernant les situations port√©es √† notre attention",
    "√Ä la lumi√®re des t√©moignages qui nous sont parvenus",
    "Devant les d√©fis pastoraux auxquels nous sommes confront√©s",
    "En r√©ponse aux pr√©occupations exprim√©es par nos fid√®les",
    "Suite aux interrogations soulev√©es dans notre dioc√®se",
    "Face aux circonstances qui interpellent notre communaut√©",
    "Concernant les questions qui nous ont √©t√© rapport√©es",
    "√Ä la suite des √©v√©nements qui ont marqu√© notre famille dioc√©saine",
    "Devant les enjeux pastoraux de cette p√©riode d√©licate",
    "En r√©action aux inqui√©tudes exprim√©es"
  ],

  acknowledgments: [
    "nous reconnaissons que des dysfonctionnements ont pu survenir",
    "nous prenons acte des questionnements de notre communaut√©",
    "nous entendons les inqui√©tudes de nos paroissiens",
    "nous mesurons l'ampleur des interrogations suscit√©es",
    "nous sommes conscients des fragilit√©s de notre institution",
    "nous accueillons les interpellations qui nous sont adress√©es",
    "nous admettons que des manquements ont pu se produire",
    "nous comprenons les pr√©occupations de nos fid√®les",
    "nous entendons les questions l√©gitimes pos√©es",
    "nous reconnaissons les difficult√©s rencontr√©es",
    "nous sommes sensibles aux inqui√©tudes exprim√©es",
    "nous prenons la mesure des interrogations soulev√©es"
  ],

  apologies: [
    "manifestons notre proximit√© aux victimes et les encourageons √† aller de l'avant par le pardon",
    "t√©moignons notre compassion aux personnes troubl√©es et les invitons √† tourner la page dans la r√©conciliation",
    "exprimons notre soutien aux √¢mes √©branl√©es et les accompagnons pour avancer par la mis√©ricorde",
    "montrons notre solidarit√© aux personnes affect√©es et les encourageons √† passer √† autre chose dans le pardon",
    "manifestons notre compr√©hension aux victimes et les soutenons pour aller de l'avant par la r√©conciliation",
    "t√©moignons notre bienveillance aux personnes touch√©es et les invitons √† tourner la page dans la mis√©ricorde",
    "exprimons notre empathie aux victimes et les encourageons √† regarder vers l'avenir par le pardon",
    "montrons notre attention aux personnes √©prouv√©es et les accompagnons pour avancer dans la r√©conciliation",
    "manifestons notre fraternit√© aux victimes et les invitons √† aller de l'avant par la mis√©ricorde",
    "},
      acknowledgments: { base: 2, multiplier: 1 },
      apologies: { base: 4, multiplier: 1 },
      misericorde: { base: 5, multiplier: 1 },
      actions: { base: 6, multiplier: 1 },
      goodFruits: { base: 4, multiplier: 1 },
      originDeflection: { base: 5, multiplier: 1 },
      scapegoats: { base: 4, multiplier: 1 },
      spiritualEndings: { base: 3, multiplier: 1 },
      closings: { base: 4, multiplier: 1 }
    };

    function getRandomItem(array) {
      return array[Math.floor(Math.random() * array.length)];
    }

    function calculateBullshitLevel(selectedItems) {
      let totalScore = 0;
      
      // Calcul bas√© sur les √©l√©ments s√©lectionn√©s
      Object.keys(selectedItems).forEach(key => {
        if (bullshitScores[key] && selectedItems[key]) {
          totalScore += bullshitScores[key].base;
        }
      });
      
      // Bonus pour certaines combinaisons
      if (selectedItems.misericorde && selectedItems.scapegoats) totalScore += 3;
      if (selectedItems.goodFruits && selectedItems.originDeflection) totalScore += 3;
      if (selectedItems.actions && selectedItems.spiritualEndings) totalScore += 2;
      if (selectedItems.apologies && selectedItems.misericorde) totalScore += 2;
      
      // Assurer que le niveau soit entre 7 et 10 (plus dur)
      const level = Math.min(Math.max(totalScore - 15, 7), 10);
      return level;
    }

    function showBullshitMeter(level) {
      const meter = document.getElementById('bullshitMeter');
      const stars = document.getElementById('bullshitStars');
      stars.innerHTML = '‚òÖ'.repeat(level) + '‚òÜ'.repeat(10-level);
      meter.classList.remove('hidden');
    }

    function showProgressBar() {
      const progressBar = document.getElementById('progressBar');
      const progressFill = document.getElementById('progressFill');
      const progressText = document.getElementById('progressText');
      
      progressBar.classList.remove('hidden');
      
      const steps = [
        { width: 20, text: "Recherche d'excuses..." },
        { width: 40, text: "Identification des boucs √©missaires..." },
        { width: 60, text: "Application de la mis√©ricorde s√©lective..." },
        { width: 80, text: "D√©tournement d'attention en cours..." },
        { width: 100, text: "Langue de bois optimis√©e !" }
      ];
      
      let currentStep = 0;
      const interval = setInterval(() => {
        if (currentStep < steps.length) {
          progressFill.style.width = steps[currentStep].width + '%';
          progressText.textContent = steps[currentStep].text;
          currentStep++;
        } else {
          clearInterval(interval);
          setTimeout(() => {
            progressBar.classList.add('hidden');
          }, 1000);
        }
      }, 400);
    }

    let currentCommunique = '';
    let currentSelectedItems = {};
    let isTranslated = false;

    function generateCommunique() {
      showProgressBar();
      
      setTimeout(() => {
        const selectedItems = {
          incidents: getRandomItem(wordLists.incidents),
          acknowledgments: getRandomItem(wordLists.acknowledgments),
          apologies: getRandomItem(wordLists.apologies),
          misericorde: getRandomItem(wordLists.misericorde),
          actions: getRandomItem(wordLists.actions),
          tourmentes: getRandomItem(wordLists.tourmentes),
          goodFruits: getRandomItem(wordLists.goodFruits),
          originDeflection: getRandomItem(wordLists.originDeflection),
          scapegoats: getRandomItem(wordLists.scapegoats),
          spiritualEndings: getRandomItem(wordLists.spiritualEndings),
          closings: getRandomItem(wordLists.closings)
        };
        
        currentSelectedItems = selectedItems;
        const bishop = getRandomItem(bishopNames);

        const communique = `${selectedItems.incidents}, ${selectedItems.acknowledgments}. En ces temps troubl√©s, ${selectedItems.apologies}. ${selectedItems.misericorde}.

${selectedItems.actions} ${selectedItems.spiritualEndings}.

${selectedItems.tourmentes}, ${selectedItems.goodFruits}. Il importe √©galement, ${selectedItems.originDeflection}, de ne pas c√©der aux man≈ìuvres de ${selectedItems.scapegoats}.

${selectedItems.closings}.`;
        
        currentCommunique = communique;
        isTranslated = false;
        
        const bullshitLevel = calculateBullshitLevel(selectedItems);
        
        document.getElementById('result').innerHTML = `
          <div class="text-left">
            <p class="text-base font-medium text-gray-800 leading-relaxed mb-6 whitespace-pre-line">${communique}</p>
            <div class="text-right text-sm text-gray-600 italic mt-4">
              <p>+ ${bishop}</p>
              <p>√âv√™que de Saint-Barbant</p>
            </div>
          </div>
        `;
        
        showBullshitMeter(bullshitLevel);
        document.getElementById('translateBtn').classList.remove('hidden');
      }, 2000);
    }

    document.getElementById('generateBtn').addEventListener('click', generateCommunique);

    document.getElementById('translateBtn').addEventListener('click', function() {
      if (isTranslated) {
        // Retour √† l'original
        document.getElementById('result').innerHTML = `
          <div class="text-left">
            <p class="text-base font-medium text-gray-800 leading-relaxed mb-6 whitespace-pre-line">${currentCommunique}</p>
            <div class="text-right text-sm text-gray-600 italic mt-4">
              <p>+ ${getRandomItem(bishopNames)}</p>
              <p>√âv√™que de Saint-Barbant</p>
            </div>
          </div>
        `;
        this.textContent = 'üîç Traduire en fran√ßais normal';
        isTranslated = false;
      } else {
        // Traduction
        let translatedCommunique = currentCommunique;
        
        // Remplacer les expressions par version barr√©e + traduction
        Object.keys(translations).forEach(key => {
          const regex = new RegExp(key, 'gi');
          translatedCommunique = translatedCommunique.replace(regex, 
            `<span class="line-through text-gray-500">${key}</span> <span class="bg-red-200 text-red-800 px-1 rounded font-medium">${translations[key]}</span>`
          );
        });
        
        document.getElementById('result').innerHTML = `
          <div class="text-left">
            <p class="text-base font-medium text-gray-800 leading-relaxed mb-6 whitespace-pre-line">${translatedCommunique}</p>
            <div class="text-right text-sm text-gray-600 italic mt-4">
              <p>+ ${getRandomItem(bishopNames)}</p>
              <p>√âv√™que de Saint-Barbant</p>
            </div>
          </div>
        `;
        this.textContent = '‚Ü©Ô∏è Retour √† l\'original';
        isTranslated = true;
      }
    });

    document.getElementById('resetBtn').addEventListener('click', function() {
      const selects = document.querySelectorAll('select');
      selects.forEach(select => {
        select.selectedIndex = 0;
      });
      document.getElementById('result').innerHTML = `<p class="text-gray-500 text-center italic">Cliquez sur "G√©n√©rer un nouveau" pour cr√©er un communiqu√© de mis√©ricorde</p>`;
      document.getElementById('bullshitMeter').classList.add('hidden');
      document.getElementById('translateBtn').classList.add('hidden');
      currentCommunique = '';
      currentSelectedItems = {};
      isTranslated = false;
    });

    const selects = document.querySelectorAll('select');
    selects.forEach(select => {
      select.addEventListener('change', function() {
        updateManualCommunique();
      });
    });

    function updateManualCommunique() {
      const selectedValues = {};
      selects.forEach(select => {
        if (select.value) {
          selectedValues[select.id] = select.value;
        }
      });

      if (Object.keys(selectedValues).length > 0) {
        let communique = "";
        
        // Premier paragraphe : incident + acknowledgment + apology + misericorde
        if (selectedValues.incidents) communique += selectedValues.incidents;
        if (selectedValues.acknowledgments) communique += `, ${selectedValues.acknowledgments}.`;
        if (selectedValues.apologies) communique += ` En ces temps troubl√©s, ${selectedValues.apologies}.`;
        if (selectedValues.misericorde) communique += ` ${selectedValues.misericorde}.`;

        // Deuxi√®me paragraphe : actions
        if (selectedValues.actions) {
          communique += `\n\n${selectedValues.actions}`;
          if (selectedValues.spiritualEndings) communique += ` ${selectedValues.spiritualEndings}.`;
        }

        // Troisi√®me paragraphe : goodFruits + originDeflection + scapegoats
        if (selectedValues.goodFruits) communique += `\n\nDans la tourmente, ${selectedValues.goodFruits}.`;
        if (selectedValues.originDeflection || selectedValues.scapegoats) {
          communique += " Il importe √©galement, ";
          if (selectedValues.originDeflection) communique += selectedValues.originDeflection + ", ";
          if (selectedValues.scapegoats) communique += `de ne pas c√©der aux man≈ìuvres de ${selectedValues.scapegoats}.`;
        }

        // Quatri√®me paragraphe : closing
        if (selectedValues.closings) communique += `\n\n${selectedValues.closings}.`;

        if (communique.trim()) {
          currentCommunique = communique;
          currentSelectedItems = selectedValues;
          isTranslated = false;
          const bishop = getRandomItem(bishopNames);
          const bullshitLevel = calculateBullshitLevel(selectedValues);
          
          document.getElementById('result').innerHTML = `
            <div class="text-left">
              <p class="text-base font-medium text-gray-800 leading-relaxed mb-6 whitespace-pre-line">${communique}</p>
              <div class="text-right text-sm text-gray-600 italic mt-4">
                <p>+ ${bishop}</p>
                <p>√âv√™que de Saint-Barbant</p>
              </div>
            </div>
          `;
          
          showBullshitMeter(bullshitLevel);
          document.getElementById('translateBtn').classList.remove('hidden');
          document.getElementById('translateBtn').textContent = 'üîç Traduire en fran√ßais normal';
        }
      }
    }
  </script>
</Layout>
